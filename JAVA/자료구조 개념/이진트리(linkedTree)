package dataStructure.tree;

public class TreeNode {
    Object data;
    TreeNode left;
    TreeNode right;
}
//
package dataStructure.tree;

public class LinkedTree {

    public TreeNode makeBT(TreeNode bt1,Object data, TreeNode bt2) {
        TreeNode root=new TreeNode();
        root.data=data;
        root.left=bt1;
        root.right=bt2;
        return root;
    }
    public void preorder(TreeNode root) {
        if(root!=null){
            System.out.print(root.data);
            preorder(root.left);
            preorder(root.right);
        }
    }
    public void inorder(TreeNode root) {
        if(root!=null){
            inorder(root.left);
            System.out.print(root.data);
            inorder(root.right);
        }
    }
    public void postorder(TreeNode root) {
        if(root!=null){
            postorder(root.left);
            postorder(root.right);
            System.out.print(root.data);
        }
    }
}
///
package dataStructure.tree;

public class LinkedTreeMain {
    public static void main(String[] args) {
        LinkedTree T = new LinkedTree();

        TreeNode n7=T.makeBT(null,'D',null);
        TreeNode n6=T.makeBT(null,'C',null);
        TreeNode n5=T.makeBT(null,'B',null);
        TreeNode n4=T.makeBT(null,'A',null);
        TreeNode n3=T.makeBT(n6,'/',n7);
        TreeNode n2=T.makeBT(n4,'*',n5);
        TreeNode n1=T.makeBT(n2,'-',n3);

        System.out.println("preorder");
        T.preorder(n1);
        System.out.println();

        System.out.println("inorder");
        T.inorder(n1);
        System.out.println();

        System.out.println("postorder");
        T.postorder(n1);
        System.out.println();
    }
}
