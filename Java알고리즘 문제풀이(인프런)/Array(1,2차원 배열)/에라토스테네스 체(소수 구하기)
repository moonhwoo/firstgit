package Array;
/*에라토스네체란
* 받는 숫자가 20이라면 배열의 크기를 21까지 정의를 한다
* 그러면 배열안의 값들이 0으로 차게되는데 이를 이용하여 for문을 돌리면서 배열값이 0이라면 1로 바꾸고 그 값의 배수들을 전부 for문을 통해1로 바꾼다
* 그러면 뒤의 부분들이 0 아님 1로 나뉘는데 이렇게 반복하면 시간을 대폭 줄일수 있다
* */
import java.util.ArrayList;

public class Main {
    public int solution(int N) {
        int ans = 0;
        int[] list=new int[N+1]; // 받은 수보다 1개 더 크게 만들어야 N까지 들어감
        for(int i=2;i<=N;i++){
            if(list[i]==0){
                ans++;
                for(int j=i;j<=N;j=j+i){ //i의 배수 만큼 커짐
                    list[j]=1;
                }

            }

        }
        return ans;
    }
}

        /*  이부분은 이중 for문을 돌린건데 N의 값이 너무 크면 시간 에러가뜬다 즉 좋지 못한 풀이
        =>에라토스네체 방식을 쓰면 시간을 단축 가능
        int many=0;
        ArrayList<Integer> primeList=new ArrayList<>();
        for (int i=2;i<=N;i++) {  // 36 37  루트 하면 6   2를 루트하면 1.   루트+1까지
            for(int p=1;p<=i;p++){//소수이면
                //math 라이브러리 안에있는것은 없음!
                if(i%p==0) { //i를 p로 나눴을때 나머지가 0이다=>나눠지면
                    many++;
                }

            }
            if(many==2){
                primeList.add(i);

            }
            many=0;

        }
        return primeList.size();
*/
-----------
package Array;

import java.util.Scanner;

public class PrimeNumber {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Main T=new Main();
        int N=sc.nextInt();
        System.out.println(T.solution(N));
    }
}
